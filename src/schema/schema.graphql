# import User, SignUpInput, SignUpData, LoginUserData, PhoneInput, AuthenticateUserData, VerifyUserInput, LoginInput, VerificationDataInput, ChangePasswordInput, UpdatePasswordInput, UpdateProfileInput from './user.graphql'
# import WalletData,WalletToWalletTransferInput, WalletToBankTransferInput, InitiateTransactionInput, FundWalletInput, WalletTransactionData, InitiateTransactionData from './wallet.graphql'
# import BankData, VerifyBankInput from './bank.graphql'

type Query {
  # user query
  authenticateUser(phonenumber: String!): AuthenticateUserData!
  user: User!
  getEasPayUserDetails(phonenumber: String!): User!

  #bank query
  banks: BankData!

  #transaction details query
  getTransactionDetails(transactionReference: String!): WalletTransactionData!
}
type Mutation {
  # user mutations
  signUp(data: SignUpInput!): SignUpData!
  verifyUser(data: VerifyUserInput!): LoginUserData
  resendVerificationCode(data: PhoneInput!): SignUpData!
  loginUser(data: LoginInput!): LoginUserData
  forgotPassword(data: PhoneInput!): SignUpData!
  resetPassword(data: ChangePasswordInput!): LoginUserData!
  updatePassword(data: UpdatePasswordInput!): LoginUserData!
  updateProfile(data: UpdateProfileInput): LoginUserData!

  #wallet mutations
  walletToWalletTransfer(
    data: WalletToWalletTransferInput
  ): WalletTransactionData
  walletToBankTransfer(data: WalletToBankTransferInput): WalletTransactionData
  fundWallet(data: FundWalletInput): WalletTransactionData
  initiateTransaction(data: InitiateTransactionInput): InitiateTransactionData

  #bank mutation
  verifyBank(data: VerifyBankInput): BankData!
}
