// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregatePasswordResetCode {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVerificationCode {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

enum Gender {
  Male
  Female
}

scalar Long

type Mutation {
  createPasswordResetCode(data: PasswordResetCodeCreateInput!): PasswordResetCode!
  updatePasswordResetCode(data: PasswordResetCodeUpdateInput!, where: PasswordResetCodeWhereUniqueInput!): PasswordResetCode
  updateManyPasswordResetCodes(data: PasswordResetCodeUpdateManyMutationInput!, where: PasswordResetCodeWhereInput): BatchPayload!
  upsertPasswordResetCode(where: PasswordResetCodeWhereUniqueInput!, create: PasswordResetCodeCreateInput!, update: PasswordResetCodeUpdateInput!): PasswordResetCode!
  deletePasswordResetCode(where: PasswordResetCodeWhereUniqueInput!): PasswordResetCode
  deleteManyPasswordResetCodes(where: PasswordResetCodeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVerificationCode(data: VerificationCodeCreateInput!): VerificationCode!
  updateVerificationCode(data: VerificationCodeUpdateInput!, where: VerificationCodeWhereUniqueInput!): VerificationCode
  updateManyVerificationCodes(data: VerificationCodeUpdateManyMutationInput!, where: VerificationCodeWhereInput): BatchPayload!
  upsertVerificationCode(where: VerificationCodeWhereUniqueInput!, create: VerificationCodeCreateInput!, update: VerificationCodeUpdateInput!): VerificationCode!
  deleteVerificationCode(where: VerificationCodeWhereUniqueInput!): VerificationCode
  deleteManyVerificationCodes(where: VerificationCodeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PasswordResetCode {
  id: ID!
  code: Int!
  deleted: Boolean!
  deletedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type PasswordResetCodeConnection {
  pageInfo: PageInfo!
  edges: [PasswordResetCodeEdge]!
  aggregate: AggregatePasswordResetCode!
}

input PasswordResetCodeCreateInput {
  code: Int!
  deleted: Boolean
  deletedAt: DateTime
  user: UserCreateOneWithoutPasswordResetCodeInput!
}

input PasswordResetCodeCreateOneWithoutUserInput {
  create: PasswordResetCodeCreateWithoutUserInput
  connect: PasswordResetCodeWhereUniqueInput
}

input PasswordResetCodeCreateWithoutUserInput {
  code: Int!
  deleted: Boolean
  deletedAt: DateTime
}

type PasswordResetCodeEdge {
  node: PasswordResetCode!
  cursor: String!
}

enum PasswordResetCodeOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  deleted_ASC
  deleted_DESC
  deletedAt_ASC
  deletedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PasswordResetCodePreviousValues {
  id: ID!
  code: Int!
  deleted: Boolean!
  deletedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PasswordResetCodeSubscriptionPayload {
  mutation: MutationType!
  node: PasswordResetCode
  updatedFields: [String!]
  previousValues: PasswordResetCodePreviousValues
}

input PasswordResetCodeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PasswordResetCodeWhereInput
  AND: [PasswordResetCodeSubscriptionWhereInput!]
  OR: [PasswordResetCodeSubscriptionWhereInput!]
  NOT: [PasswordResetCodeSubscriptionWhereInput!]
}

input PasswordResetCodeUpdateInput {
  code: Int
  deleted: Boolean
  deletedAt: DateTime
  user: UserUpdateOneRequiredWithoutPasswordResetCodeInput
}

input PasswordResetCodeUpdateManyMutationInput {
  code: Int
  deleted: Boolean
  deletedAt: DateTime
}

input PasswordResetCodeUpdateOneWithoutUserInput {
  create: PasswordResetCodeCreateWithoutUserInput
  update: PasswordResetCodeUpdateWithoutUserDataInput
  upsert: PasswordResetCodeUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: PasswordResetCodeWhereUniqueInput
}

input PasswordResetCodeUpdateWithoutUserDataInput {
  code: Int
  deleted: Boolean
  deletedAt: DateTime
}

input PasswordResetCodeUpsertWithoutUserInput {
  update: PasswordResetCodeUpdateWithoutUserDataInput!
  create: PasswordResetCodeCreateWithoutUserInput!
}

input PasswordResetCodeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  code: Int
  code_not: Int
  code_in: [Int!]
  code_not_in: [Int!]
  code_lt: Int
  code_lte: Int
  code_gt: Int
  code_gte: Int
  deleted: Boolean
  deleted_not: Boolean
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  AND: [PasswordResetCodeWhereInput!]
  OR: [PasswordResetCodeWhereInput!]
  NOT: [PasswordResetCodeWhereInput!]
}

input PasswordResetCodeWhereUniqueInput {
  id: ID
}

type Query {
  passwordResetCode(where: PasswordResetCodeWhereUniqueInput!): PasswordResetCode
  passwordResetCodes(where: PasswordResetCodeWhereInput, orderBy: PasswordResetCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PasswordResetCode]!
  passwordResetCodesConnection(where: PasswordResetCodeWhereInput, orderBy: PasswordResetCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PasswordResetCodeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  verificationCode(where: VerificationCodeWhereUniqueInput!): VerificationCode
  verificationCodes(where: VerificationCodeWhereInput, orderBy: VerificationCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VerificationCode]!
  verificationCodesConnection(where: VerificationCodeWhereInput, orderBy: VerificationCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VerificationCodeConnection!
  node(id: ID!): Node
}

type Subscription {
  passwordResetCode(where: PasswordResetCodeSubscriptionWhereInput): PasswordResetCodeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  verificationCode(where: VerificationCodeSubscriptionWhereInput): VerificationCodeSubscriptionPayload
}

type User {
  id: ID!
  firstname: String!
  middlename: String!
  lastname: String!
  DOB: DateTime!
  email: String!
  phonenumber: String!
  password: String!
  gender: Gender!
  verified: Boolean!
  deleted: Boolean!
  deletedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  verificationCode: VerificationCode
  passwordResetCode: PasswordResetCode
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstname: String!
  middlename: String!
  lastname: String!
  DOB: DateTime!
  email: String!
  phonenumber: String!
  password: String!
  gender: Gender!
  verified: Boolean
  deleted: Boolean
  deletedAt: DateTime
  verificationCode: VerificationCodeCreateOneWithoutUserInput
  passwordResetCode: PasswordResetCodeCreateOneWithoutUserInput
}

input UserCreateOneWithoutPasswordResetCodeInput {
  create: UserCreateWithoutPasswordResetCodeInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutVerificationCodeInput {
  create: UserCreateWithoutVerificationCodeInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPasswordResetCodeInput {
  firstname: String!
  middlename: String!
  lastname: String!
  DOB: DateTime!
  email: String!
  phonenumber: String!
  password: String!
  gender: Gender!
  verified: Boolean
  deleted: Boolean
  deletedAt: DateTime
  verificationCode: VerificationCodeCreateOneWithoutUserInput
}

input UserCreateWithoutVerificationCodeInput {
  firstname: String!
  middlename: String!
  lastname: String!
  DOB: DateTime!
  email: String!
  phonenumber: String!
  password: String!
  gender: Gender!
  verified: Boolean
  deleted: Boolean
  deletedAt: DateTime
  passwordResetCode: PasswordResetCodeCreateOneWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstname_ASC
  firstname_DESC
  middlename_ASC
  middlename_DESC
  lastname_ASC
  lastname_DESC
  DOB_ASC
  DOB_DESC
  email_ASC
  email_DESC
  phonenumber_ASC
  phonenumber_DESC
  password_ASC
  password_DESC
  gender_ASC
  gender_DESC
  verified_ASC
  verified_DESC
  deleted_ASC
  deleted_DESC
  deletedAt_ASC
  deletedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstname: String!
  middlename: String!
  lastname: String!
  DOB: DateTime!
  email: String!
  phonenumber: String!
  password: String!
  gender: Gender!
  verified: Boolean!
  deleted: Boolean!
  deletedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstname: String
  middlename: String
  lastname: String
  DOB: DateTime
  email: String
  phonenumber: String
  password: String
  gender: Gender
  verified: Boolean
  deleted: Boolean
  deletedAt: DateTime
  verificationCode: VerificationCodeUpdateOneWithoutUserInput
  passwordResetCode: PasswordResetCodeUpdateOneWithoutUserInput
}

input UserUpdateManyMutationInput {
  firstname: String
  middlename: String
  lastname: String
  DOB: DateTime
  email: String
  phonenumber: String
  password: String
  gender: Gender
  verified: Boolean
  deleted: Boolean
  deletedAt: DateTime
}

input UserUpdateOneRequiredWithoutPasswordResetCodeInput {
  create: UserCreateWithoutPasswordResetCodeInput
  update: UserUpdateWithoutPasswordResetCodeDataInput
  upsert: UserUpsertWithoutPasswordResetCodeInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutVerificationCodeInput {
  create: UserCreateWithoutVerificationCodeInput
  update: UserUpdateWithoutVerificationCodeDataInput
  upsert: UserUpsertWithoutVerificationCodeInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPasswordResetCodeDataInput {
  firstname: String
  middlename: String
  lastname: String
  DOB: DateTime
  email: String
  phonenumber: String
  password: String
  gender: Gender
  verified: Boolean
  deleted: Boolean
  deletedAt: DateTime
  verificationCode: VerificationCodeUpdateOneWithoutUserInput
}

input UserUpdateWithoutVerificationCodeDataInput {
  firstname: String
  middlename: String
  lastname: String
  DOB: DateTime
  email: String
  phonenumber: String
  password: String
  gender: Gender
  verified: Boolean
  deleted: Boolean
  deletedAt: DateTime
  passwordResetCode: PasswordResetCodeUpdateOneWithoutUserInput
}

input UserUpsertWithoutPasswordResetCodeInput {
  update: UserUpdateWithoutPasswordResetCodeDataInput!
  create: UserCreateWithoutPasswordResetCodeInput!
}

input UserUpsertWithoutVerificationCodeInput {
  update: UserUpdateWithoutVerificationCodeDataInput!
  create: UserCreateWithoutVerificationCodeInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstname: String
  firstname_not: String
  firstname_in: [String!]
  firstname_not_in: [String!]
  firstname_lt: String
  firstname_lte: String
  firstname_gt: String
  firstname_gte: String
  firstname_contains: String
  firstname_not_contains: String
  firstname_starts_with: String
  firstname_not_starts_with: String
  firstname_ends_with: String
  firstname_not_ends_with: String
  middlename: String
  middlename_not: String
  middlename_in: [String!]
  middlename_not_in: [String!]
  middlename_lt: String
  middlename_lte: String
  middlename_gt: String
  middlename_gte: String
  middlename_contains: String
  middlename_not_contains: String
  middlename_starts_with: String
  middlename_not_starts_with: String
  middlename_ends_with: String
  middlename_not_ends_with: String
  lastname: String
  lastname_not: String
  lastname_in: [String!]
  lastname_not_in: [String!]
  lastname_lt: String
  lastname_lte: String
  lastname_gt: String
  lastname_gte: String
  lastname_contains: String
  lastname_not_contains: String
  lastname_starts_with: String
  lastname_not_starts_with: String
  lastname_ends_with: String
  lastname_not_ends_with: String
  DOB: DateTime
  DOB_not: DateTime
  DOB_in: [DateTime!]
  DOB_not_in: [DateTime!]
  DOB_lt: DateTime
  DOB_lte: DateTime
  DOB_gt: DateTime
  DOB_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phonenumber: String
  phonenumber_not: String
  phonenumber_in: [String!]
  phonenumber_not_in: [String!]
  phonenumber_lt: String
  phonenumber_lte: String
  phonenumber_gt: String
  phonenumber_gte: String
  phonenumber_contains: String
  phonenumber_not_contains: String
  phonenumber_starts_with: String
  phonenumber_not_starts_with: String
  phonenumber_ends_with: String
  phonenumber_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  verified: Boolean
  verified_not: Boolean
  deleted: Boolean
  deleted_not: Boolean
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  verificationCode: VerificationCodeWhereInput
  passwordResetCode: PasswordResetCodeWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  phonenumber: String
}

type VerificationCode {
  id: ID!
  code: Int!
  deleted: Boolean!
  deletedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type VerificationCodeConnection {
  pageInfo: PageInfo!
  edges: [VerificationCodeEdge]!
  aggregate: AggregateVerificationCode!
}

input VerificationCodeCreateInput {
  code: Int!
  deleted: Boolean
  deletedAt: DateTime
  user: UserCreateOneWithoutVerificationCodeInput!
}

input VerificationCodeCreateOneWithoutUserInput {
  create: VerificationCodeCreateWithoutUserInput
  connect: VerificationCodeWhereUniqueInput
}

input VerificationCodeCreateWithoutUserInput {
  code: Int!
  deleted: Boolean
  deletedAt: DateTime
}

type VerificationCodeEdge {
  node: VerificationCode!
  cursor: String!
}

enum VerificationCodeOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  deleted_ASC
  deleted_DESC
  deletedAt_ASC
  deletedAt_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VerificationCodePreviousValues {
  id: ID!
  code: Int!
  deleted: Boolean!
  deletedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VerificationCodeSubscriptionPayload {
  mutation: MutationType!
  node: VerificationCode
  updatedFields: [String!]
  previousValues: VerificationCodePreviousValues
}

input VerificationCodeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VerificationCodeWhereInput
  AND: [VerificationCodeSubscriptionWhereInput!]
  OR: [VerificationCodeSubscriptionWhereInput!]
  NOT: [VerificationCodeSubscriptionWhereInput!]
}

input VerificationCodeUpdateInput {
  code: Int
  deleted: Boolean
  deletedAt: DateTime
  user: UserUpdateOneRequiredWithoutVerificationCodeInput
}

input VerificationCodeUpdateManyMutationInput {
  code: Int
  deleted: Boolean
  deletedAt: DateTime
}

input VerificationCodeUpdateOneWithoutUserInput {
  create: VerificationCodeCreateWithoutUserInput
  update: VerificationCodeUpdateWithoutUserDataInput
  upsert: VerificationCodeUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: VerificationCodeWhereUniqueInput
}

input VerificationCodeUpdateWithoutUserDataInput {
  code: Int
  deleted: Boolean
  deletedAt: DateTime
}

input VerificationCodeUpsertWithoutUserInput {
  update: VerificationCodeUpdateWithoutUserDataInput!
  create: VerificationCodeCreateWithoutUserInput!
}

input VerificationCodeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  code: Int
  code_not: Int
  code_in: [Int!]
  code_not_in: [Int!]
  code_lt: Int
  code_lte: Int
  code_gt: Int
  code_gte: Int
  deleted: Boolean
  deleted_not: Boolean
  deletedAt: DateTime
  deletedAt_not: DateTime
  deletedAt_in: [DateTime!]
  deletedAt_not_in: [DateTime!]
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  AND: [VerificationCodeWhereInput!]
  OR: [VerificationCodeWhereInput!]
  NOT: [VerificationCodeWhereInput!]
}

input VerificationCodeWhereUniqueInput {
  id: ID
}
`