// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  passwordResetCode: (where?: PasswordResetCodeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  verificationCode: (where?: VerificationCodeWhereInput) => Promise<boolean>;
  wallet: (where?: WalletWhereInput) => Promise<boolean>;
  walletTransaction: (where?: WalletTransactionWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  passwordResetCode: (
    where: PasswordResetCodeWhereUniqueInput
  ) => PasswordResetCodePromise;
  passwordResetCodes: (
    args?: {
      where?: PasswordResetCodeWhereInput;
      orderBy?: PasswordResetCodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PasswordResetCode>;
  passwordResetCodesConnection: (
    args?: {
      where?: PasswordResetCodeWhereInput;
      orderBy?: PasswordResetCodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PasswordResetCodeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  verificationCode: (
    where: VerificationCodeWhereUniqueInput
  ) => VerificationCodePromise;
  verificationCodes: (
    args?: {
      where?: VerificationCodeWhereInput;
      orderBy?: VerificationCodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<VerificationCode>;
  verificationCodesConnection: (
    args?: {
      where?: VerificationCodeWhereInput;
      orderBy?: VerificationCodeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VerificationCodeConnectionPromise;
  wallet: (where: WalletWhereUniqueInput) => WalletPromise;
  wallets: (
    args?: {
      where?: WalletWhereInput;
      orderBy?: WalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Wallet>;
  walletsConnection: (
    args?: {
      where?: WalletWhereInput;
      orderBy?: WalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WalletConnectionPromise;
  walletTransaction: (
    where: WalletTransactionWhereUniqueInput
  ) => WalletTransactionPromise;
  walletTransactions: (
    args?: {
      where?: WalletTransactionWhereInput;
      orderBy?: WalletTransactionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<WalletTransaction>;
  walletTransactionsConnection: (
    args?: {
      where?: WalletTransactionWhereInput;
      orderBy?: WalletTransactionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => WalletTransactionConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPasswordResetCode: (
    data: PasswordResetCodeCreateInput
  ) => PasswordResetCodePromise;
  updatePasswordResetCode: (
    args: {
      data: PasswordResetCodeUpdateInput;
      where: PasswordResetCodeWhereUniqueInput;
    }
  ) => PasswordResetCodePromise;
  updateManyPasswordResetCodes: (
    args: {
      data: PasswordResetCodeUpdateManyMutationInput;
      where?: PasswordResetCodeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPasswordResetCode: (
    args: {
      where: PasswordResetCodeWhereUniqueInput;
      create: PasswordResetCodeCreateInput;
      update: PasswordResetCodeUpdateInput;
    }
  ) => PasswordResetCodePromise;
  deletePasswordResetCode: (
    where: PasswordResetCodeWhereUniqueInput
  ) => PasswordResetCodePromise;
  deleteManyPasswordResetCodes: (
    where?: PasswordResetCodeWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVerificationCode: (
    data: VerificationCodeCreateInput
  ) => VerificationCodePromise;
  updateVerificationCode: (
    args: {
      data: VerificationCodeUpdateInput;
      where: VerificationCodeWhereUniqueInput;
    }
  ) => VerificationCodePromise;
  updateManyVerificationCodes: (
    args: {
      data: VerificationCodeUpdateManyMutationInput;
      where?: VerificationCodeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertVerificationCode: (
    args: {
      where: VerificationCodeWhereUniqueInput;
      create: VerificationCodeCreateInput;
      update: VerificationCodeUpdateInput;
    }
  ) => VerificationCodePromise;
  deleteVerificationCode: (
    where: VerificationCodeWhereUniqueInput
  ) => VerificationCodePromise;
  deleteManyVerificationCodes: (
    where?: VerificationCodeWhereInput
  ) => BatchPayloadPromise;
  createWallet: (data: WalletCreateInput) => WalletPromise;
  updateWallet: (
    args: { data: WalletUpdateInput; where: WalletWhereUniqueInput }
  ) => WalletPromise;
  updateManyWallets: (
    args: { data: WalletUpdateManyMutationInput; where?: WalletWhereInput }
  ) => BatchPayloadPromise;
  upsertWallet: (
    args: {
      where: WalletWhereUniqueInput;
      create: WalletCreateInput;
      update: WalletUpdateInput;
    }
  ) => WalletPromise;
  deleteWallet: (where: WalletWhereUniqueInput) => WalletPromise;
  deleteManyWallets: (where?: WalletWhereInput) => BatchPayloadPromise;
  createWalletTransaction: (
    data: WalletTransactionCreateInput
  ) => WalletTransactionPromise;
  updateWalletTransaction: (
    args: {
      data: WalletTransactionUpdateInput;
      where: WalletTransactionWhereUniqueInput;
    }
  ) => WalletTransactionPromise;
  updateManyWalletTransactions: (
    args: {
      data: WalletTransactionUpdateManyMutationInput;
      where?: WalletTransactionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertWalletTransaction: (
    args: {
      where: WalletTransactionWhereUniqueInput;
      create: WalletTransactionCreateInput;
      update: WalletTransactionUpdateInput;
    }
  ) => WalletTransactionPromise;
  deleteWalletTransaction: (
    where: WalletTransactionWhereUniqueInput
  ) => WalletTransactionPromise;
  deleteManyWalletTransactions: (
    where?: WalletTransactionWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  passwordResetCode: (
    where?: PasswordResetCodeSubscriptionWhereInput
  ) => PasswordResetCodeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  verificationCode: (
    where?: VerificationCodeSubscriptionWhereInput
  ) => VerificationCodeSubscriptionPayloadSubscription;
  wallet: (
    where?: WalletSubscriptionWhereInput
  ) => WalletSubscriptionPayloadSubscription;
  walletTransaction: (
    where?: WalletTransactionSubscriptionWhereInput
  ) => WalletTransactionSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TransactionType = "Debit" | "Credit" | "Pending";

export type Gender = "Male" | "Female";

export type WalletTransactionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "type_ASC"
  | "type_DESC"
  | "description_ASC"
  | "description_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PasswordResetCodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fullname_ASC"
  | "fullname_DESC"
  | "DOB_ASC"
  | "DOB_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phonenumber_ASC"
  | "phonenumber_DESC"
  | "password_ASC"
  | "password_DESC"
  | "profile_picture_ASC"
  | "profile_picture_DESC"
  | "transaction_pin_ASC"
  | "transaction_pin_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "verified_ASC"
  | "verified_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VerificationCodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type WalletOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface WalletUpdateWithoutUserDataInput {
  amount?: Float;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  wallet_transactions?: WalletTransactionUpdateManyWithoutWalletInput;
}

export type PasswordResetCodeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateWithoutPasswordResetCodeInput {
  fullname: String;
  DOB: DateTimeInput;
  email: String;
  phonenumber: String;
  password: String;
  profile_picture: String;
  transaction_pin: String;
  gender: Gender;
  verified?: Boolean;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  verificationCode?: VerificationCodeCreateOneWithoutUserInput;
  wallet?: WalletCreateOneWithoutUserInput;
}

export interface UserCreateOneWithoutVerificationCodeInput {
  create?: UserCreateWithoutVerificationCodeInput;
  connect?: UserWhereUniqueInput;
}

export interface VerificationCodeCreateOneWithoutUserInput {
  create?: VerificationCodeCreateWithoutUserInput;
  connect?: VerificationCodeWhereUniqueInput;
}

export interface WalletTransactionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  type?: TransactionType;
  type_not?: TransactionType;
  type_in?: TransactionType[] | TransactionType;
  type_not_in?: TransactionType[] | TransactionType;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  deleted?: Boolean;
  deleted_not?: Boolean;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: WalletTransactionScalarWhereInput[] | WalletTransactionScalarWhereInput;
  OR?: WalletTransactionScalarWhereInput[] | WalletTransactionScalarWhereInput;
  NOT?: WalletTransactionScalarWhereInput[] | WalletTransactionScalarWhereInput;
}

export interface VerificationCodeCreateWithoutUserInput {
  code: Int;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface WalletTransactionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WalletTransactionWhereInput;
  AND?:
    | WalletTransactionSubscriptionWhereInput[]
    | WalletTransactionSubscriptionWhereInput;
  OR?:
    | WalletTransactionSubscriptionWhereInput[]
    | WalletTransactionSubscriptionWhereInput;
  NOT?:
    | WalletTransactionSubscriptionWhereInput[]
    | WalletTransactionSubscriptionWhereInput;
}

export interface WalletCreateOneWithoutUserInput {
  create?: WalletCreateWithoutUserInput;
  connect?: WalletWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  fullname?: String;
  fullname_not?: String;
  fullname_in?: String[] | String;
  fullname_not_in?: String[] | String;
  fullname_lt?: String;
  fullname_lte?: String;
  fullname_gt?: String;
  fullname_gte?: String;
  fullname_contains?: String;
  fullname_not_contains?: String;
  fullname_starts_with?: String;
  fullname_not_starts_with?: String;
  fullname_ends_with?: String;
  fullname_not_ends_with?: String;
  DOB?: DateTimeInput;
  DOB_not?: DateTimeInput;
  DOB_in?: DateTimeInput[] | DateTimeInput;
  DOB_not_in?: DateTimeInput[] | DateTimeInput;
  DOB_lt?: DateTimeInput;
  DOB_lte?: DateTimeInput;
  DOB_gt?: DateTimeInput;
  DOB_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phonenumber?: String;
  phonenumber_not?: String;
  phonenumber_in?: String[] | String;
  phonenumber_not_in?: String[] | String;
  phonenumber_lt?: String;
  phonenumber_lte?: String;
  phonenumber_gt?: String;
  phonenumber_gte?: String;
  phonenumber_contains?: String;
  phonenumber_not_contains?: String;
  phonenumber_starts_with?: String;
  phonenumber_not_starts_with?: String;
  phonenumber_ends_with?: String;
  phonenumber_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  profile_picture?: String;
  profile_picture_not?: String;
  profile_picture_in?: String[] | String;
  profile_picture_not_in?: String[] | String;
  profile_picture_lt?: String;
  profile_picture_lte?: String;
  profile_picture_gt?: String;
  profile_picture_gte?: String;
  profile_picture_contains?: String;
  profile_picture_not_contains?: String;
  profile_picture_starts_with?: String;
  profile_picture_not_starts_with?: String;
  profile_picture_ends_with?: String;
  profile_picture_not_ends_with?: String;
  transaction_pin?: String;
  transaction_pin_not?: String;
  transaction_pin_in?: String[] | String;
  transaction_pin_not_in?: String[] | String;
  transaction_pin_lt?: String;
  transaction_pin_lte?: String;
  transaction_pin_gt?: String;
  transaction_pin_gte?: String;
  transaction_pin_contains?: String;
  transaction_pin_not_contains?: String;
  transaction_pin_starts_with?: String;
  transaction_pin_not_starts_with?: String;
  transaction_pin_ends_with?: String;
  transaction_pin_not_ends_with?: String;
  gender?: Gender;
  gender_not?: Gender;
  gender_in?: Gender[] | Gender;
  gender_not_in?: Gender[] | Gender;
  verified?: Boolean;
  verified_not?: Boolean;
  deleted?: Boolean;
  deleted_not?: Boolean;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  verificationCode?: VerificationCodeWhereInput;
  passwordResetCode?: PasswordResetCodeWhereInput;
  wallet?: WalletWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface WalletCreateWithoutUserInput {
  amount: Float;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  wallet_transactions?: WalletTransactionCreateManyWithoutWalletInput;
}

export interface PasswordResetCodeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  code?: Int;
  code_not?: Int;
  code_in?: Int[] | Int;
  code_not_in?: Int[] | Int;
  code_lt?: Int;
  code_lte?: Int;
  code_gt?: Int;
  code_gte?: Int;
  deleted?: Boolean;
  deleted_not?: Boolean;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  user?: UserWhereInput;
  AND?: PasswordResetCodeWhereInput[] | PasswordResetCodeWhereInput;
  OR?: PasswordResetCodeWhereInput[] | PasswordResetCodeWhereInput;
  NOT?: PasswordResetCodeWhereInput[] | PasswordResetCodeWhereInput;
}

export interface WalletTransactionCreateManyWithoutWalletInput {
  create?:
    | WalletTransactionCreateWithoutWalletInput[]
    | WalletTransactionCreateWithoutWalletInput;
  connect?:
    | WalletTransactionWhereUniqueInput[]
    | WalletTransactionWhereUniqueInput;
}

export interface VerificationCodeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VerificationCodeWhereInput;
  AND?:
    | VerificationCodeSubscriptionWhereInput[]
    | VerificationCodeSubscriptionWhereInput;
  OR?:
    | VerificationCodeSubscriptionWhereInput[]
    | VerificationCodeSubscriptionWhereInput;
  NOT?:
    | VerificationCodeSubscriptionWhereInput[]
    | VerificationCodeSubscriptionWhereInput;
}

export interface WalletTransactionCreateWithoutWalletInput {
  amount: Float;
  type: TransactionType;
  description: String;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface PasswordResetCodeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PasswordResetCodeWhereInput;
  AND?:
    | PasswordResetCodeSubscriptionWhereInput[]
    | PasswordResetCodeSubscriptionWhereInput;
  OR?:
    | PasswordResetCodeSubscriptionWhereInput[]
    | PasswordResetCodeSubscriptionWhereInput;
  NOT?:
    | PasswordResetCodeSubscriptionWhereInput[]
    | PasswordResetCodeSubscriptionWhereInput;
}

export interface PasswordResetCodeUpdateInput {
  code?: Int;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  user?: UserUpdateOneRequiredWithoutPasswordResetCodeInput;
}

export interface WalletUpsertWithoutWallet_transactionsInput {
  update: WalletUpdateWithoutWallet_transactionsDataInput;
  create: WalletCreateWithoutWallet_transactionsInput;
}

export interface UserUpdateOneRequiredWithoutPasswordResetCodeInput {
  create?: UserCreateWithoutPasswordResetCodeInput;
  update?: UserUpdateWithoutPasswordResetCodeDataInput;
  upsert?: UserUpsertWithoutPasswordResetCodeInput;
  connect?: UserWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  phonenumber?: String;
}>;

export interface UserUpdateWithoutPasswordResetCodeDataInput {
  fullname?: String;
  DOB?: DateTimeInput;
  email?: String;
  phonenumber?: String;
  password?: String;
  profile_picture?: String;
  transaction_pin?: String;
  gender?: Gender;
  verified?: Boolean;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  verificationCode?: VerificationCodeUpdateOneWithoutUserInput;
  wallet?: WalletUpdateOneWithoutUserInput;
}

export interface WalletTransactionUpdateInput {
  amount?: Float;
  type?: TransactionType;
  description?: String;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  wallet?: WalletUpdateOneRequiredWithoutWallet_transactionsInput;
}

export interface VerificationCodeUpdateOneWithoutUserInput {
  create?: VerificationCodeCreateWithoutUserInput;
  update?: VerificationCodeUpdateWithoutUserDataInput;
  upsert?: VerificationCodeUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VerificationCodeWhereUniqueInput;
}

export interface WalletCreateOneWithoutWallet_transactionsInput {
  create?: WalletCreateWithoutWallet_transactionsInput;
  connect?: WalletWhereUniqueInput;
}

export interface VerificationCodeUpdateWithoutUserDataInput {
  code?: Int;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface WalletTransactionCreateInput {
  amount: Float;
  type: TransactionType;
  description: String;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  wallet: WalletCreateOneWithoutWallet_transactionsInput;
}

export interface VerificationCodeUpsertWithoutUserInput {
  update: VerificationCodeUpdateWithoutUserDataInput;
  create: VerificationCodeCreateWithoutUserInput;
}

export interface UserUpsertWithoutWalletInput {
  update: UserUpdateWithoutWalletDataInput;
  create: UserCreateWithoutWalletInput;
}

export interface WalletUpdateOneWithoutUserInput {
  create?: WalletCreateWithoutUserInput;
  update?: WalletUpdateWithoutUserDataInput;
  upsert?: WalletUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: WalletWhereUniqueInput;
}

export type WalletWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutVerificationCodeDataInput {
  fullname?: String;
  DOB?: DateTimeInput;
  email?: String;
  phonenumber?: String;
  password?: String;
  profile_picture?: String;
  transaction_pin?: String;
  gender?: Gender;
  verified?: Boolean;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  passwordResetCode?: PasswordResetCodeUpdateOneWithoutUserInput;
  wallet?: WalletUpdateOneWithoutUserInput;
}

export interface WalletUpdateInput {
  amount?: Float;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  user?: UserUpdateOneRequiredWithoutWalletInput;
  wallet_transactions?: WalletTransactionUpdateManyWithoutWalletInput;
}

export interface WalletTransactionUpdateManyWithoutWalletInput {
  create?:
    | WalletTransactionCreateWithoutWalletInput[]
    | WalletTransactionCreateWithoutWalletInput;
  delete?:
    | WalletTransactionWhereUniqueInput[]
    | WalletTransactionWhereUniqueInput;
  connect?:
    | WalletTransactionWhereUniqueInput[]
    | WalletTransactionWhereUniqueInput;
  set?: WalletTransactionWhereUniqueInput[] | WalletTransactionWhereUniqueInput;
  disconnect?:
    | WalletTransactionWhereUniqueInput[]
    | WalletTransactionWhereUniqueInput;
  update?:
    | WalletTransactionUpdateWithWhereUniqueWithoutWalletInput[]
    | WalletTransactionUpdateWithWhereUniqueWithoutWalletInput;
  upsert?:
    | WalletTransactionUpsertWithWhereUniqueWithoutWalletInput[]
    | WalletTransactionUpsertWithWhereUniqueWithoutWalletInput;
  deleteMany?:
    | WalletTransactionScalarWhereInput[]
    | WalletTransactionScalarWhereInput;
  updateMany?:
    | WalletTransactionUpdateManyWithWhereNestedInput[]
    | WalletTransactionUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutWalletInput {
  create?: UserCreateWithoutWalletInput;
  connect?: UserWhereUniqueInput;
}

export interface WalletTransactionUpdateWithWhereUniqueWithoutWalletInput {
  where: WalletTransactionWhereUniqueInput;
  data: WalletTransactionUpdateWithoutWalletDataInput;
}

export interface WalletCreateInput {
  amount: Float;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  user: UserCreateOneWithoutWalletInput;
  wallet_transactions?: WalletTransactionCreateManyWithoutWalletInput;
}

export interface WalletTransactionUpdateWithoutWalletDataInput {
  amount?: Float;
  type?: TransactionType;
  description?: String;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface UserUpsertWithoutVerificationCodeInput {
  update: UserUpdateWithoutVerificationCodeDataInput;
  create: UserCreateWithoutVerificationCodeInput;
}

export interface WalletTransactionUpsertWithWhereUniqueWithoutWalletInput {
  where: WalletTransactionWhereUniqueInput;
  update: WalletTransactionUpdateWithoutWalletDataInput;
  create: WalletTransactionCreateWithoutWalletInput;
}

export interface PasswordResetCodeCreateInput {
  code: Int;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  user: UserCreateOneWithoutPasswordResetCodeInput;
}

export interface UserUpdateOneRequiredWithoutVerificationCodeInput {
  create?: UserCreateWithoutVerificationCodeInput;
  update?: UserUpdateWithoutVerificationCodeDataInput;
  upsert?: UserUpsertWithoutVerificationCodeInput;
  connect?: UserWhereUniqueInput;
}

export interface WalletTransactionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  type?: TransactionType;
  type_not?: TransactionType;
  type_in?: TransactionType[] | TransactionType;
  type_not_in?: TransactionType[] | TransactionType;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  deleted?: Boolean;
  deleted_not?: Boolean;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  wallet?: WalletWhereInput;
  AND?: WalletTransactionWhereInput[] | WalletTransactionWhereInput;
  OR?: WalletTransactionWhereInput[] | WalletTransactionWhereInput;
  NOT?: WalletTransactionWhereInput[] | WalletTransactionWhereInput;
}

export interface WalletTransactionUpdateManyWithWhereNestedInput {
  where: WalletTransactionScalarWhereInput;
  data: WalletTransactionUpdateManyDataInput;
}

export interface VerificationCodeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  code?: Int;
  code_not?: Int;
  code_in?: Int[] | Int;
  code_not_in?: Int[] | Int;
  code_lt?: Int;
  code_lte?: Int;
  code_gt?: Int;
  code_gte?: Int;
  deleted?: Boolean;
  deleted_not?: Boolean;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  user?: UserWhereInput;
  AND?: VerificationCodeWhereInput[] | VerificationCodeWhereInput;
  OR?: VerificationCodeWhereInput[] | VerificationCodeWhereInput;
  NOT?: VerificationCodeWhereInput[] | VerificationCodeWhereInput;
}

export interface WalletTransactionUpdateManyDataInput {
  amount?: Float;
  type?: TransactionType;
  description?: String;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface WalletUpsertWithoutUserInput {
  update: WalletUpdateWithoutUserDataInput;
  create: WalletCreateWithoutUserInput;
}

export interface WalletUpdateWithoutWallet_transactionsDataInput {
  amount?: Float;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  user?: UserUpdateOneRequiredWithoutWalletInput;
}

export interface UserUpsertWithoutPasswordResetCodeInput {
  update: UserUpdateWithoutPasswordResetCodeDataInput;
  create: UserCreateWithoutPasswordResetCodeInput;
}

export interface WalletCreateWithoutWallet_transactionsInput {
  amount: Float;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  user: UserCreateOneWithoutWalletInput;
}

export interface PasswordResetCodeUpdateManyMutationInput {
  code?: Int;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface WalletUpdateManyMutationInput {
  amount?: Float;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface VerificationCodeUpdateInput {
  code?: Int;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  user?: UserUpdateOneRequiredWithoutVerificationCodeInput;
}

export interface UserUpdateOneRequiredWithoutWalletInput {
  create?: UserCreateWithoutWalletInput;
  update?: UserUpdateWithoutWalletDataInput;
  upsert?: UserUpsertWithoutWalletInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutVerificationCodeInput {
  fullname: String;
  DOB: DateTimeInput;
  email: String;
  phonenumber: String;
  password: String;
  profile_picture: String;
  transaction_pin: String;
  gender: Gender;
  verified?: Boolean;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  passwordResetCode?: PasswordResetCodeCreateOneWithoutUserInput;
  wallet?: WalletCreateOneWithoutUserInput;
}

export type WalletTransactionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateInput {
  fullname: String;
  DOB: DateTimeInput;
  email: String;
  phonenumber: String;
  password: String;
  profile_picture: String;
  transaction_pin: String;
  gender: Gender;
  verified?: Boolean;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  verificationCode?: VerificationCodeCreateOneWithoutUserInput;
  passwordResetCode?: PasswordResetCodeCreateOneWithoutUserInput;
  wallet?: WalletCreateOneWithoutUserInput;
}

export interface WalletWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  amount?: Float;
  amount_not?: Float;
  amount_in?: Float[] | Float;
  amount_not_in?: Float[] | Float;
  amount_lt?: Float;
  amount_lte?: Float;
  amount_gt?: Float;
  amount_gte?: Float;
  deleted?: Boolean;
  deleted_not?: Boolean;
  deletedAt?: DateTimeInput;
  deletedAt_not?: DateTimeInput;
  deletedAt_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_not_in?: DateTimeInput[] | DateTimeInput;
  deletedAt_lt?: DateTimeInput;
  deletedAt_lte?: DateTimeInput;
  deletedAt_gt?: DateTimeInput;
  deletedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  user?: UserWhereInput;
  wallet_transactions_every?: WalletTransactionWhereInput;
  wallet_transactions_some?: WalletTransactionWhereInput;
  wallet_transactions_none?: WalletTransactionWhereInput;
  AND?: WalletWhereInput[] | WalletWhereInput;
  OR?: WalletWhereInput[] | WalletWhereInput;
  NOT?: WalletWhereInput[] | WalletWhereInput;
}

export interface PasswordResetCodeCreateOneWithoutUserInput {
  create?: PasswordResetCodeCreateWithoutUserInput;
  connect?: PasswordResetCodeWhereUniqueInput;
}

export interface WalletTransactionUpdateManyMutationInput {
  amount?: Float;
  type?: TransactionType;
  description?: String;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface PasswordResetCodeCreateWithoutUserInput {
  code: Int;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export type VerificationCodeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateInput {
  fullname?: String;
  DOB?: DateTimeInput;
  email?: String;
  phonenumber?: String;
  password?: String;
  profile_picture?: String;
  transaction_pin?: String;
  gender?: Gender;
  verified?: Boolean;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  verificationCode?: VerificationCodeUpdateOneWithoutUserInput;
  passwordResetCode?: PasswordResetCodeUpdateOneWithoutUserInput;
  wallet?: WalletUpdateOneWithoutUserInput;
}

export interface UserCreateWithoutWalletInput {
  fullname: String;
  DOB: DateTimeInput;
  email: String;
  phonenumber: String;
  password: String;
  profile_picture: String;
  transaction_pin: String;
  gender: Gender;
  verified?: Boolean;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  verificationCode?: VerificationCodeCreateOneWithoutUserInput;
  passwordResetCode?: PasswordResetCodeCreateOneWithoutUserInput;
}

export interface PasswordResetCodeUpdateOneWithoutUserInput {
  create?: PasswordResetCodeCreateWithoutUserInput;
  update?: PasswordResetCodeUpdateWithoutUserDataInput;
  upsert?: PasswordResetCodeUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PasswordResetCodeWhereUniqueInput;
}

export interface UserCreateOneWithoutPasswordResetCodeInput {
  create?: UserCreateWithoutPasswordResetCodeInput;
  connect?: UserWhereUniqueInput;
}

export interface VerificationCodeCreateInput {
  code: Int;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  user: UserCreateOneWithoutVerificationCodeInput;
}

export interface UserUpdateManyMutationInput {
  fullname?: String;
  DOB?: DateTimeInput;
  email?: String;
  phonenumber?: String;
  password?: String;
  profile_picture?: String;
  transaction_pin?: String;
  gender?: Gender;
  verified?: Boolean;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface PasswordResetCodeUpsertWithoutUserInput {
  update: PasswordResetCodeUpdateWithoutUserDataInput;
  create: PasswordResetCodeCreateWithoutUserInput;
}

export interface PasswordResetCodeUpdateWithoutUserDataInput {
  code?: Int;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface WalletSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WalletWhereInput;
  AND?: WalletSubscriptionWhereInput[] | WalletSubscriptionWhereInput;
  OR?: WalletSubscriptionWhereInput[] | WalletSubscriptionWhereInput;
  NOT?: WalletSubscriptionWhereInput[] | WalletSubscriptionWhereInput;
}

export interface VerificationCodeUpdateManyMutationInput {
  code?: Int;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
}

export interface UserUpdateWithoutWalletDataInput {
  fullname?: String;
  DOB?: DateTimeInput;
  email?: String;
  phonenumber?: String;
  password?: String;
  profile_picture?: String;
  transaction_pin?: String;
  gender?: Gender;
  verified?: Boolean;
  deleted?: Boolean;
  deletedAt?: DateTimeInput;
  verificationCode?: VerificationCodeUpdateOneWithoutUserInput;
  passwordResetCode?: PasswordResetCodeUpdateOneWithoutUserInput;
}

export interface WalletUpdateOneRequiredWithoutWallet_transactionsInput {
  create?: WalletCreateWithoutWallet_transactionsInput;
  update?: WalletUpdateWithoutWallet_transactionsDataInput;
  upsert?: WalletUpsertWithoutWallet_transactionsInput;
  connect?: WalletWhereUniqueInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WalletTransactionPreviousValues {
  id: ID_Output;
  amount: Float;
  type: TransactionType;
  description: String;
  deleted: Boolean;
  deletedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WalletTransactionPreviousValuesPromise
  extends Promise<WalletTransactionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  type: () => Promise<TransactionType>;
  description: () => Promise<String>;
  deleted: () => Promise<Boolean>;
  deletedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WalletTransactionPreviousValuesSubscription
  extends Promise<AsyncIterator<WalletTransactionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  type: () => Promise<AsyncIterator<TransactionType>>;
  description: () => Promise<AsyncIterator<String>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregatePasswordResetCode {
  count: Int;
}

export interface AggregatePasswordResetCodePromise
  extends Promise<AggregatePasswordResetCode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePasswordResetCodeSubscription
  extends Promise<AsyncIterator<AggregatePasswordResetCode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Wallet {
  id: ID_Output;
  amount: Float;
  deleted: Boolean;
  deletedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WalletPromise extends Promise<Wallet>, Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  deleted: () => Promise<Boolean>;
  deletedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  wallet_transactions: <T = FragmentableArray<WalletTransaction>>(
    args?: {
      where?: WalletTransactionWhereInput;
      orderBy?: WalletTransactionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface WalletSubscription
  extends Promise<AsyncIterator<Wallet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  wallet_transactions: <
    T = Promise<AsyncIterator<WalletTransactionSubscription>>
  >(
    args?: {
      where?: WalletTransactionWhereInput;
      orderBy?: WalletTransactionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface VerificationCodePreviousValues {
  id: ID_Output;
  code: Int;
  deleted: Boolean;
  deletedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VerificationCodePreviousValuesPromise
  extends Promise<VerificationCodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<Int>;
  deleted: () => Promise<Boolean>;
  deletedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface VerificationCodePreviousValuesSubscription
  extends Promise<AsyncIterator<VerificationCodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<Int>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface WalletPreviousValues {
  id: ID_Output;
  amount: Float;
  deleted: Boolean;
  deletedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WalletPreviousValuesPromise
  extends Promise<WalletPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  deleted: () => Promise<Boolean>;
  deletedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface WalletPreviousValuesSubscription
  extends Promise<AsyncIterator<WalletPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PasswordResetCodeEdge {
  node: PasswordResetCode;
  cursor: String;
}

export interface PasswordResetCodeEdgePromise
  extends Promise<PasswordResetCodeEdge>,
    Fragmentable {
  node: <T = PasswordResetCodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PasswordResetCodeEdgeSubscription
  extends Promise<AsyncIterator<PasswordResetCodeEdge>>,
    Fragmentable {
  node: <T = PasswordResetCodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface WalletTransactionEdge {
  node: WalletTransaction;
  cursor: String;
}

export interface WalletTransactionEdgePromise
  extends Promise<WalletTransactionEdge>,
    Fragmentable {
  node: <T = WalletTransactionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WalletTransactionEdgeSubscription
  extends Promise<AsyncIterator<WalletTransactionEdge>>,
    Fragmentable {
  node: <T = WalletTransactionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface WalletSubscriptionPayload {
  mutation: MutationType;
  node: Wallet;
  updatedFields: String[];
  previousValues: WalletPreviousValues;
}

export interface WalletSubscriptionPayloadPromise
  extends Promise<WalletSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WalletPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WalletPreviousValuesPromise>() => T;
}

export interface WalletSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WalletSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WalletSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WalletPreviousValuesSubscription>() => T;
}

export interface AggregateWallet {
  count: Int;
}

export interface AggregateWalletPromise
  extends Promise<AggregateWallet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWalletSubscription
  extends Promise<AsyncIterator<AggregateWallet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface WalletConnection {
  pageInfo: PageInfo;
  edges: WalletEdge[];
}

export interface WalletConnectionPromise
  extends Promise<WalletConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WalletEdge>>() => T;
  aggregate: <T = AggregateWalletPromise>() => T;
}

export interface WalletConnectionSubscription
  extends Promise<AsyncIterator<WalletConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WalletEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWalletSubscription>() => T;
}

export interface PasswordResetCodeConnection {
  pageInfo: PageInfo;
  edges: PasswordResetCodeEdge[];
}

export interface PasswordResetCodeConnectionPromise
  extends Promise<PasswordResetCodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PasswordResetCodeEdge>>() => T;
  aggregate: <T = AggregatePasswordResetCodePromise>() => T;
}

export interface PasswordResetCodeConnectionSubscription
  extends Promise<AsyncIterator<PasswordResetCodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PasswordResetCodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePasswordResetCodeSubscription>() => T;
}

export interface AggregateVerificationCode {
  count: Int;
}

export interface AggregateVerificationCodePromise
  extends Promise<AggregateVerificationCode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVerificationCodeSubscription
  extends Promise<AsyncIterator<AggregateVerificationCode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PasswordResetCode {
  id: ID_Output;
  code: Int;
  deleted: Boolean;
  deletedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PasswordResetCodePromise
  extends Promise<PasswordResetCode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<Int>;
  deleted: () => Promise<Boolean>;
  deletedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface PasswordResetCodeSubscription
  extends Promise<AsyncIterator<PasswordResetCode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<Int>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
}

export interface VerificationCodeConnection {
  pageInfo: PageInfo;
  edges: VerificationCodeEdge[];
}

export interface VerificationCodeConnectionPromise
  extends Promise<VerificationCodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VerificationCodeEdge>>() => T;
  aggregate: <T = AggregateVerificationCodePromise>() => T;
}

export interface VerificationCodeConnectionSubscription
  extends Promise<AsyncIterator<VerificationCodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VerificationCodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVerificationCodeSubscription>() => T;
}

export interface PasswordResetCodeSubscriptionPayload {
  mutation: MutationType;
  node: PasswordResetCode;
  updatedFields: String[];
  previousValues: PasswordResetCodePreviousValues;
}

export interface PasswordResetCodeSubscriptionPayloadPromise
  extends Promise<PasswordResetCodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PasswordResetCodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PasswordResetCodePreviousValuesPromise>() => T;
}

export interface PasswordResetCodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PasswordResetCodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PasswordResetCodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PasswordResetCodePreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PasswordResetCodePreviousValues {
  id: ID_Output;
  code: Int;
  deleted: Boolean;
  deletedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PasswordResetCodePreviousValuesPromise
  extends Promise<PasswordResetCodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<Int>;
  deleted: () => Promise<Boolean>;
  deletedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PasswordResetCodePreviousValuesSubscription
  extends Promise<AsyncIterator<PasswordResetCodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<Int>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateWalletTransaction {
  count: Int;
}

export interface AggregateWalletTransactionPromise
  extends Promise<AggregateWalletTransaction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWalletTransactionSubscription
  extends Promise<AsyncIterator<AggregateWalletTransaction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  fullname: String;
  DOB: DateTimeOutput;
  email: String;
  phonenumber: String;
  password: String;
  profile_picture: String;
  transaction_pin: String;
  gender: Gender;
  verified: Boolean;
  deleted: Boolean;
  deletedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  fullname: () => Promise<String>;
  DOB: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  phonenumber: () => Promise<String>;
  password: () => Promise<String>;
  profile_picture: () => Promise<String>;
  transaction_pin: () => Promise<String>;
  gender: () => Promise<Gender>;
  verified: () => Promise<Boolean>;
  deleted: () => Promise<Boolean>;
  deletedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  verificationCode: <T = VerificationCodePromise>() => T;
  passwordResetCode: <T = PasswordResetCodePromise>() => T;
  wallet: <T = WalletPromise>() => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullname: () => Promise<AsyncIterator<String>>;
  DOB: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  phonenumber: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profile_picture: () => Promise<AsyncIterator<String>>;
  transaction_pin: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  verificationCode: <T = VerificationCodeSubscription>() => T;
  passwordResetCode: <T = PasswordResetCodeSubscription>() => T;
  wallet: <T = WalletSubscription>() => T;
}

export interface WalletEdge {
  node: Wallet;
  cursor: String;
}

export interface WalletEdgePromise extends Promise<WalletEdge>, Fragmentable {
  node: <T = WalletPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WalletEdgeSubscription
  extends Promise<AsyncIterator<WalletEdge>>,
    Fragmentable {
  node: <T = WalletSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VerificationCodeEdge {
  node: VerificationCode;
  cursor: String;
}

export interface VerificationCodeEdgePromise
  extends Promise<VerificationCodeEdge>,
    Fragmentable {
  node: <T = VerificationCodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VerificationCodeEdgeSubscription
  extends Promise<AsyncIterator<VerificationCodeEdge>>,
    Fragmentable {
  node: <T = VerificationCodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface VerificationCodeSubscriptionPayload {
  mutation: MutationType;
  node: VerificationCode;
  updatedFields: String[];
  previousValues: VerificationCodePreviousValues;
}

export interface VerificationCodeSubscriptionPayloadPromise
  extends Promise<VerificationCodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VerificationCodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VerificationCodePreviousValuesPromise>() => T;
}

export interface VerificationCodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VerificationCodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VerificationCodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VerificationCodePreviousValuesSubscription>() => T;
}

export interface WalletTransaction {
  id: ID_Output;
  amount: Float;
  type: TransactionType;
  description: String;
  deleted: Boolean;
  deletedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface WalletTransactionPromise
  extends Promise<WalletTransaction>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  type: () => Promise<TransactionType>;
  description: () => Promise<String>;
  deleted: () => Promise<Boolean>;
  deletedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  wallet: <T = WalletPromise>() => T;
}

export interface WalletTransactionSubscription
  extends Promise<AsyncIterator<WalletTransaction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  type: () => Promise<AsyncIterator<TransactionType>>;
  description: () => Promise<AsyncIterator<String>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  wallet: <T = WalletSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  fullname: String;
  DOB: DateTimeOutput;
  email: String;
  phonenumber: String;
  password: String;
  profile_picture: String;
  transaction_pin: String;
  gender: Gender;
  verified: Boolean;
  deleted: Boolean;
  deletedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  fullname: () => Promise<String>;
  DOB: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  phonenumber: () => Promise<String>;
  password: () => Promise<String>;
  profile_picture: () => Promise<String>;
  transaction_pin: () => Promise<String>;
  gender: () => Promise<Gender>;
  verified: () => Promise<Boolean>;
  deleted: () => Promise<Boolean>;
  deletedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  fullname: () => Promise<AsyncIterator<String>>;
  DOB: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  phonenumber: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profile_picture: () => Promise<AsyncIterator<String>>;
  transaction_pin: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<Gender>>;
  verified: () => Promise<AsyncIterator<Boolean>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface VerificationCode {
  id: ID_Output;
  code: Int;
  deleted: Boolean;
  deletedAt?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface VerificationCodePromise
  extends Promise<VerificationCode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<Int>;
  deleted: () => Promise<Boolean>;
  deletedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface VerificationCodeSubscription
  extends Promise<AsyncIterator<VerificationCode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<Int>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deletedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
}

export interface WalletTransactionSubscriptionPayload {
  mutation: MutationType;
  node: WalletTransaction;
  updatedFields: String[];
  previousValues: WalletTransactionPreviousValues;
}

export interface WalletTransactionSubscriptionPayloadPromise
  extends Promise<WalletTransactionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WalletTransactionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WalletTransactionPreviousValuesPromise>() => T;
}

export interface WalletTransactionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WalletTransactionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WalletTransactionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WalletTransactionPreviousValuesSubscription>() => T;
}

export interface WalletTransactionConnection {
  pageInfo: PageInfo;
  edges: WalletTransactionEdge[];
}

export interface WalletTransactionConnectionPromise
  extends Promise<WalletTransactionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WalletTransactionEdge>>() => T;
  aggregate: <T = AggregateWalletTransactionPromise>() => T;
}

export interface WalletTransactionConnectionSubscription
  extends Promise<AsyncIterator<WalletTransactionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WalletTransactionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWalletTransactionSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export type Long = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "VerificationCode",
    embedded: false
  },
  {
    name: "PasswordResetCode",
    embedded: false
  },
  {
    name: "Wallet",
    embedded: false
  },
  {
    name: "WalletTransaction",
    embedded: false
  },
  {
    name: "TransactionType",
    embedded: false
  },
  {
    name: "Gender",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`
});
export const prisma = new Prisma();
